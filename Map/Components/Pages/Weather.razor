@using RabbitMQ.Client;
@using System.Text;
@using RabbitMQ.Client.Events;

@page "/weather"

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<table class="table">
    <thead>
        <tr>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>  
                <td>@forecast</td>
            </tr>
        }
    </tbody>
</table>


@code {
    public List<string> forecasts = new List<string>(){ "teste" };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(" [*] Waiting for messages.");

        var consumer = new EventingBasicConsumer(this.Channel);
        consumer.Received += async (model, ea) =>
        {
            this.UpdateForecasts(ea);
        };
        this.Channel.BasicConsume(queue: "hello",
                             autoAck: true,
                             consumer: consumer);
    }

    private void UpdateForecasts(BasicDeliverEventArgs ea)
    {
        var body = ea.Body.ToArray();
        var message = Encoding.UTF8.GetString(body);
        this.forecasts.Add(message);
        InvokeAsync(StateHasChanged);

        Console.WriteLine($" [x] Received {message}");bbbbb
    }

    private IModel channel;
    public IModel Channel
    {
        get
        {
            if (this.channel == null)
            {
                var factory = new ConnectionFactory { HostName = "localhost" };
                var connection = factory.CreateConnection();
                var channel = connection.CreateModel();

                channel.QueueDeclare(queue: "hello",
                                     durable: false,
                                     exclusive: false,
                                     autoDelete: false,
                                     arguments: null);

                this.channel = channel;
            }
            return this.channel;
        }
    }

}
